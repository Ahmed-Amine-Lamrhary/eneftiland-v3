datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  Admin        admin?   @relation(fields: [adminId], references: [id])
  adminId      String?
}

model user {
  id              String        @id @default(cuid())
  name            String?
  email           String?       @unique
  image           String?
  metamaskAddress String?
  Transaction     transaction[]
  Collection      collection[]
}

model verificationtoken {
  id String @id @default(cuid())

  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model plan {
  id                     String  @id @default(cuid())
  price                  Float   @unique
  assetsNumber           Float   @unique
  features               String
  watermark              Boolean @default(false)
  priceToRemoveWatermark Float?
}

model transaction {
  id          String   @id @default(cuid())
  userId      String?
  label       String
  amount      Float
  method      String?
  currency    String
  dateCreated DateTime @default(now())
  user        user?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model settings {
  id String @id @default(cuid())

  watermarkUrl String?
  watermarkPos String  @default("bottom-right") // top-left top-right bottom-left bottom-right center full
  logoUrl      String?
  faviconUrl   String?
  businessName String?

  googleAnalyticsTrackingCode String?

  paypalClientId       String?
  isPaypal             Boolean @default(false)
  metamaskAddress      String?
  isMetamask           Boolean @default(false)
  stripePublishableKey String?
  stripeSecretKey      String?
  isStripe             Boolean @default(false)
  razorpayPublicKey    String?
  isRazorpay           Boolean @default(false)
}

model privacypage {
  id      String @id @default(cuid())
  title   String @default("Privacy Policy")
  content String
}

model termspage {
  id      String @id @default(cuid())
  title   String @default("Terms and Services")
  content String
}

model collection {
  id     String @id @default(cuid())
  userId String
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)

  layers        String @db.VarChar(65535)
  galleryLayers String @db.VarChar(65535)
  results       String @db.VarChar(65535)

  collectionDesc String
  collectionName String
  collectionSize Int
  creators       String    @db.VarChar(65535)
  externalUrl    String
  network        String
  prefix         String
  royalties      Float
  symbol         String
  size           Int
  History        history[]

  dateCreated DateTime @default(now())
  Rule        rule[]
}

model history {
  id           String     @id @default(cuid())
  collectionId String
  collection   collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  dateCreated  DateTime   @default(now())
  ipfsGateway  String
  imagesCid    String
  metaCid      String
  layers       String     @db.VarChar(65535)
  results      String     @db.VarChar(65535)
  completed    Boolean

  collectionDesc String?
  collectionName String?
  collectionSize Int
  creators       String? @db.VarChar(65535)
  externalUrl    String?
  network        String?
  prefix         String?
  royalties      Float?
  symbol         String?
  size           Int?
}

model rule {
  id           String     @id @default(cuid())
  collectionId String
  collection   collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  trait1       String
  condition    String
  trait2       String
}

model admin {
  id       String    @id @default(cuid())
  name     String?
  email    String?   @unique
  password String?
  isSuper  Boolean   @default(false)
  sessions session[]
}
